'use strict';

var _ = require('lodash');
var util = require('util');

var parser = require('./parser');

var arraySort = function arraySort(a, b) {
  if (a > b) return 1;
  if (a < b) return -1;
  return 0;
};

var normalizeTypeDef = function normalizeTypeDef(typeDef) {
  var formattedTypeDef = typeDef.replace(/[\s]/g, '').replace(/varchar/g, 'text').replace(/frozen/ig, 'frozen');
  var frozenMatch = formattedTypeDef.match(/frozen</g);
  if (frozenMatch && frozenMatch.length) return formattedTypeDef.replace(/frozen</g, '').slice(0, -1 * frozenMatch.length);
  return formattedTypeDef;
};

var normalizer = {
  normalize_replication_option(replicationOptions) {
    var normalizedReplicationOptions = replicationOptions;
    Object.keys(normalizedReplicationOptions).forEach(function (key) {
      if (key === 'class') {
        normalizedReplicationOptions[key] = normalizedReplicationOptions[key].replace('org.apache.cassandra.locator.', '');
        return;
      }
      normalizedReplicationOptions[key] = parseInt(normalizedReplicationOptions[key], 10);
    });
    return normalizedReplicationOptions;
  },

  normalize_query_option(options) {
    var queryOptions = { prepare: options.prepare };
    if (options.consistency) queryOptions.consistency = options.consistency;
    if (options.fetchSize) queryOptions.fetchSize = options.fetchSize;
    if (options.autoPage) queryOptions.autoPage = options.autoPage;
    if (options.hints) queryOptions.hints = options.hints;
    if (options.pageState) queryOptions.pageState = options.pageState;
    if (options.retry) queryOptions.retry = options.retry;
    if (options.serialConsistency) queryOptions.serialConsistency = options.serialConsistency;
    if (options.customPayload) queryOptions.customPayload = options.customPayload;
    if (options.isIdempotent) queryOptions.isIdempotent = options.isIdempotent;
    if (options.readTimeout) queryOptions.readTimeout = options.readTimeout;
    if (options.retry) queryOptions.retry = options.retry;
    if (options.retryOnTimeout) queryOptions.retryOnTimeout = options.retryOnTimeout;
    if (options.routingIndexes) queryOptions.routingIndexes = options.routingIndexes;
    if (options.routingKey) queryOptions.routingKey = options.routingKey;
    if (options.routingNames) queryOptions.routingNames = options.routingNames;
    if (options.timestamp) queryOptions.timestamp = options.timestamp;
    return queryOptions;
  },

  normalize_user_defined_type(fieldType) {
    return normalizeTypeDef(fieldType);
  },

  normalize_primary_key(outputSchema) {
    if (outputSchema.key && typeof outputSchema.key[0] === 'string') {
      outputSchema.key[0] = [outputSchema.key[0]];
    }

    if (outputSchema.key && outputSchema.key.length) {
      for (var i = 1; i < outputSchema.key.length; i++) {
        if (!outputSchema.clustering_order) outputSchema.clustering_order = {};
        if (!outputSchema.clustering_order[outputSchema.key[i]]) {
          outputSchema.clustering_order[outputSchema.key[i]] = 'ASC';
        }

        // eslint-disable-next-line max-len
        outputSchema.clustering_order[outputSchema.key[i]] = outputSchema.clustering_order[outputSchema.key[i]].toUpperCase();
      }
    }
  },

  normalize_fields(modelSchema, outputSchema) {
    Object.keys(outputSchema.fields).forEach(function (fieldName) {
      if (typeof outputSchema.fields[fieldName] === 'string') {
        outputSchema.fields[fieldName] = { type: outputSchema.fields[fieldName] };
      }

      if (fieldName === 'solr_query' || outputSchema.fields[fieldName].virtual) {
        delete outputSchema.fields[fieldName];
        return;
      }

      if (outputSchema.fields[fieldName].typeDef) {
        outputSchema.fields[fieldName] = {
          type: outputSchema.fields[fieldName].type,
          typeDef: outputSchema.fields[fieldName].typeDef
        };
      } else {
        outputSchema.fields[fieldName] = { type: outputSchema.fields[fieldName].type };
      }

      if (outputSchema.fields[fieldName].type === 'varchar') {
        outputSchema.fields[fieldName].type = 'text';
      }

      if (['map', 'list', 'set', 'frozen'].includes(outputSchema.fields[fieldName].type)) {
        if (modelSchema.typeMaps && modelSchema.typeMaps[fieldName]) {
          outputSchema.fields[fieldName].typeDef = normalizeTypeDef(modelSchema.typeMaps[fieldName]);
        } else {
          outputSchema.fields[fieldName].typeDef = normalizeTypeDef(outputSchema.fields[fieldName].typeDef);
        }
      }

      if (modelSchema.staticMaps && modelSchema.staticMaps[fieldName] === true) {
        outputSchema.fields[fieldName].static = true;
      } else if (modelSchema.fields[fieldName].static) {
        outputSchema.fields[fieldName].static = true;
      }
    });
  },

  normalize_materialized_views(outputSchema) {
    if (!outputSchema.materialized_views) {
      outputSchema.materialized_views = {};
    }

    Object.keys(outputSchema.materialized_views).forEach(function (materializedViewName) {
      var outputMView = outputSchema.materialized_views[materializedViewName];
      // make parition key an array
      if (outputMView.key && typeof outputMView.key[0] === 'string') {
        outputMView.key[0] = [outputMView.key[0]];
      }

      // add clustering_order for all clustering keys
      if (outputMView.key && outputMView.key.length) {
        for (var i = 1; i < outputMView.key.length; i++) {
          if (!outputMView.clustering_order) {
            outputMView.clustering_order = {};
          }
          if (!outputMView.clustering_order[outputMView.key[i]]) {
            outputMView.clustering_order[outputMView.key[i]] = 'ASC';
          }
          // eslint-disable-next-line max-len
          outputMView.clustering_order[outputMView.key[i]] = outputMView.clustering_order[outputMView.key[i]].toUpperCase();
        }
      }

      // add all non existent primary key items to select and sort them
      for (var pkeyIndex = 0; pkeyIndex < outputMView.key.length; pkeyIndex++) {
        if (pkeyIndex === 0) {
          for (var partitionIndex = 0; partitionIndex < outputMView.key[pkeyIndex].length; partitionIndex++) {
            if (!outputMView.select.includes(outputMView.key[pkeyIndex][partitionIndex])) {
              outputMView.select.push(outputMView.key[pkeyIndex][partitionIndex]);
            }
          }
        } else if (!outputMView.select.includes(outputMView.key[pkeyIndex])) {
          outputMView.select.push(outputMView.key[pkeyIndex]);
        }
      }

      // check if select has * and then add all fields to select
      if (outputMView.select[0] === '*') {
        outputMView.select = Object.keys(outputSchema.fields);
      }

      outputMView.select.sort(arraySort);

      if (!outputMView.where_clause) {
        outputMView.where_clause = parser.get_mview_where_clause(outputSchema, outputMView);
      }
      if (_.isPlainObject(outputMView.filters)) {
        delete outputMView.filters;
      }
    });
  },

  normalize_indexes(outputSchema) {
    if (!outputSchema.indexes) {
      outputSchema.indexes = [];
    }
    for (var i = 0; i < outputSchema.indexes.length; i++) {
      var indexNameList = outputSchema.indexes[i].replace(/["\s]/g, '').split(/[()]/g);
      if (indexNameList.length > 1) {
        indexNameList[0] = indexNameList[0].toLowerCase();
        if (indexNameList[0] === 'values') outputSchema.indexes[i] = indexNameList[1];else outputSchema.indexes[i] = util.format('%s(%s)', indexNameList[0], indexNameList[1]);
      } else {
        outputSchema.indexes[i] = indexNameList[0];
      }
    }
    outputSchema.indexes.sort(arraySort);
  },

  normalize_custom_indexes(outputSchema) {
    if (outputSchema.custom_index) {
      outputSchema.custom_indexes = [outputSchema.custom_index];
      delete outputSchema.custom_index;
    }

    if (outputSchema.custom_indexes) {
      var customArraySort = function customArraySort(a, b) {
        if (a.on > b.on) return 1;
        if (a.on < b.on) return -1;

        if (a.using > b.using) return 1;
        if (a.using < b.using) return -1;

        if (a.options > b.options) return 1;
        if (a.options < b.options) return -1;

        return 0;
      };

      outputSchema.custom_indexes.sort(customArraySort);
    } else {
      outputSchema.custom_indexes = [];
    }

    outputSchema.custom_indexes = _.remove(outputSchema.custom_indexes, function (cindex) {
      return cindex.on !== 'solr_query';
    });
  },

  normalize_model_schema(modelSchema) {
    var outputSchema = _.cloneDeep(modelSchema, true);
    var normalizableSchemaProperties = ['fields', 'key', 'clustering_order', 'materialized_views', 'indexes', 'custom_index', 'custom_indexes'];

    Object.keys(outputSchema).forEach(function (schemaProperty) {
      if (!normalizableSchemaProperties.includes(schemaProperty)) {
        delete outputSchema[schemaProperty];
      }
    });

    this.normalize_fields(modelSchema, outputSchema);
    this.normalize_primary_key(outputSchema);
    this.normalize_materialized_views(outputSchema);
    this.normalize_indexes(outputSchema);
    this.normalize_custom_indexes(outputSchema);

    return outputSchema;
  },

  remove_dependent_views_from_normalized_schema(normalizedDBSchema, dbSchema, fieldName) {
    var dependentViews = [];
    Object.keys(normalizedDBSchema.materialized_views).forEach(function (dbViewName) {
      if (normalizedDBSchema.materialized_views[dbViewName].select.includes(fieldName)) {
        dependentViews.push(dbViewName);
      } else if (normalizedDBSchema.materialized_views[dbViewName].select[0] === '*') {
        dependentViews.push(dbViewName);
      } else if (normalizedDBSchema.materialized_views[dbViewName].key.includes(fieldName)) {
        dependentViews.push(dbViewName);
      } else if (_.isArray(normalizedDBSchema.materialized_views[dbViewName].key[0]) && normalizedDBSchema.materialized_views[dbViewName].key[0].includes(fieldName)) {
        dependentViews.push(dbViewName);
      }
    });
    dependentViews.forEach(function (viewName) {
      normalizedDBSchema.materialized_views[viewName] = {};
    });
  }
};

module.exports = normalizer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9ub3JtYWxpemVyLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwidXRpbCIsInBhcnNlciIsImFycmF5U29ydCIsImEiLCJiIiwibm9ybWFsaXplVHlwZURlZiIsInR5cGVEZWYiLCJmb3JtYXR0ZWRUeXBlRGVmIiwicmVwbGFjZSIsImZyb3plbk1hdGNoIiwibWF0Y2giLCJsZW5ndGgiLCJzbGljZSIsIm5vcm1hbGl6ZXIiLCJub3JtYWxpemVfcmVwbGljYXRpb25fb3B0aW9uIiwicmVwbGljYXRpb25PcHRpb25zIiwibm9ybWFsaXplZFJlcGxpY2F0aW9uT3B0aW9ucyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwicGFyc2VJbnQiLCJub3JtYWxpemVfcXVlcnlfb3B0aW9uIiwib3B0aW9ucyIsInF1ZXJ5T3B0aW9ucyIsInByZXBhcmUiLCJjb25zaXN0ZW5jeSIsImZldGNoU2l6ZSIsImF1dG9QYWdlIiwiaGludHMiLCJwYWdlU3RhdGUiLCJyZXRyeSIsInNlcmlhbENvbnNpc3RlbmN5IiwiY3VzdG9tUGF5bG9hZCIsImlzSWRlbXBvdGVudCIsInJlYWRUaW1lb3V0IiwicmV0cnlPblRpbWVvdXQiLCJyb3V0aW5nSW5kZXhlcyIsInJvdXRpbmdLZXkiLCJyb3V0aW5nTmFtZXMiLCJ0aW1lc3RhbXAiLCJub3JtYWxpemVfdXNlcl9kZWZpbmVkX3R5cGUiLCJmaWVsZFR5cGUiLCJub3JtYWxpemVfcHJpbWFyeV9rZXkiLCJvdXRwdXRTY2hlbWEiLCJpIiwiY2x1c3RlcmluZ19vcmRlciIsInRvVXBwZXJDYXNlIiwibm9ybWFsaXplX2ZpZWxkcyIsIm1vZGVsU2NoZW1hIiwiZmllbGRzIiwiZmllbGROYW1lIiwidHlwZSIsInZpcnR1YWwiLCJpbmNsdWRlcyIsInR5cGVNYXBzIiwic3RhdGljTWFwcyIsInN0YXRpYyIsIm5vcm1hbGl6ZV9tYXRlcmlhbGl6ZWRfdmlld3MiLCJtYXRlcmlhbGl6ZWRfdmlld3MiLCJtYXRlcmlhbGl6ZWRWaWV3TmFtZSIsIm91dHB1dE1WaWV3IiwicGtleUluZGV4IiwicGFydGl0aW9uSW5kZXgiLCJzZWxlY3QiLCJwdXNoIiwic29ydCIsIndoZXJlX2NsYXVzZSIsImdldF9tdmlld193aGVyZV9jbGF1c2UiLCJpc1BsYWluT2JqZWN0IiwiZmlsdGVycyIsIm5vcm1hbGl6ZV9pbmRleGVzIiwiaW5kZXhlcyIsImluZGV4TmFtZUxpc3QiLCJzcGxpdCIsInRvTG93ZXJDYXNlIiwiZm9ybWF0Iiwibm9ybWFsaXplX2N1c3RvbV9pbmRleGVzIiwiY3VzdG9tX2luZGV4IiwiY3VzdG9tX2luZGV4ZXMiLCJjdXN0b21BcnJheVNvcnQiLCJvbiIsInVzaW5nIiwicmVtb3ZlIiwiY2luZGV4Iiwibm9ybWFsaXplX21vZGVsX3NjaGVtYSIsImNsb25lRGVlcCIsIm5vcm1hbGl6YWJsZVNjaGVtYVByb3BlcnRpZXMiLCJzY2hlbWFQcm9wZXJ0eSIsInJlbW92ZV9kZXBlbmRlbnRfdmlld3NfZnJvbV9ub3JtYWxpemVkX3NjaGVtYSIsIm5vcm1hbGl6ZWREQlNjaGVtYSIsImRiU2NoZW1hIiwiZGVwZW5kZW50Vmlld3MiLCJkYlZpZXdOYW1lIiwiaXNBcnJheSIsInZpZXdOYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxJQUFJQyxRQUFRLFFBQVIsQ0FBVjtBQUNBLElBQU1DLE9BQU9ELFFBQVEsTUFBUixDQUFiOztBQUVBLElBQU1FLFNBQVNGLFFBQVEsVUFBUixDQUFmOztBQUVBLElBQU1HLFlBQVksU0FBWkEsU0FBWSxDQUFDQyxDQUFELEVBQUlDLENBQUosRUFBVTtBQUMxQixNQUFJRCxJQUFJQyxDQUFSLEVBQVcsT0FBTyxDQUFQO0FBQ1gsTUFBSUQsSUFBSUMsQ0FBUixFQUFXLE9BQU8sQ0FBQyxDQUFSO0FBQ1gsU0FBTyxDQUFQO0FBQ0QsQ0FKRDs7QUFNQSxJQUFNQyxtQkFBbUIsU0FBbkJBLGdCQUFtQixDQUFDQyxPQUFELEVBQWE7QUFD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QUFzRCxDQUF0RCxFQUF5RGtDLFFBQXpELENBQWtFSCxTQUFsRSxDQURSLEVBQ3NGO0FBQzNGeUMsdUJBQWUzQixJQUFmLENBQW9CNEIsVUFBcEI7QUFDRDtBQUNGLEtBWEQ7QUFZQUQsbUJBQWV6RSxPQUFmLENBQXVCLFVBQUM0RSxRQUFELEVBQWM7QUFDbkNMLHlCQUFtQi9CLGtCQUFuQixDQUFzQ29DLFFBQXRDLElBQWtELEVBQWxEO0FBQ0QsS0FGRDtBQUdEO0FBMU9nQixDQUFuQjs7QUE2T0FDLE9BQU9DLE9BQVAsR0FBaUJwRixVQUFqQiIsImZpbGUiOiJub3JtYWxpemVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgXyA9IHJlcXVpcmUoJ2xvZGFzaCcpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuY29uc3QgcGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXInKTtcblxuY29uc3QgYXJyYXlTb3J0ID0gKGEsIGIpID0+IHtcbiAgaWYgKGEgPiBiKSByZXR1cm4gMTtcbiAgaWYgKGEgPCBiKSByZXR1cm4gLTE7XG4gIHJldHVybiAwO1xufTtcblxuY29uc3Qgbm9ybWFsaXplVHlwZURlZiA9ICh0eXBlRGVmKSA9PiB7XG4gIGNvbnN0IGZvcm1hdHRlZFR5cGVEZWYgPSB0eXBlRGVmLnJlcGxhY2UoL1tcXHNdL2csICcnKS5yZXBsYWNlKC92YXJjaGFyL2csICd0ZXh0JykucmVwbGFjZSgvZnJvemVuL2lnLCAnZnJvemVuJyk7XG4gIGNvbnN0IGZyb3plbk1hdGNoID0gZm9ybWF0dGVkVHlwZURlZi5tYXRjaCgvZnJvemVuPC9nKTtcbiAgaWYgKGZyb3plbk1hdGNoICYmIGZyb3plbk1hdGNoLmxlbmd0aCkgcmV0dXJuIGZvcm1hdHRlZFR5cGVEZWYucmVwbGFjZSgvZnJvemVuPC9nLCAnJykuc2xpY2UoMCwgLTEgKiBmcm96ZW5NYXRjaC5sZW5ndGgpO1xuICByZXR1cm4gZm9ybWF0dGVkVHlwZURlZjtcbn07XG5cbmNvbnN0IG5vcm1hbGl6ZXIgPSB7XG4gIG5vcm1hbGl6ZV9yZXBsaWNhdGlvbl9vcHRpb24ocmVwbGljYXRpb25PcHRpb25zKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZFJlcGxpY2F0aW9uT3B0aW9ucyA9IHJlcGxpY2F0aW9uT3B0aW9ucztcbiAgICBPYmplY3Qua2V5cyhub3JtYWxpemVkUmVwbGljYXRpb25PcHRpb25zKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkgPT09ICdjbGFzcycpIHtcbiAgICAgICAgbm9ybWFsaXplZFJlcGxpY2F0aW9uT3B0aW9uc1trZXldID0gbm9ybWFsaXplZFJlcGxpY2F0aW9uT3B0aW9uc1trZXldLnJlcGxhY2UoJ29yZy5hcGFjaGUuY2Fzc2FuZHJhLmxvY2F0b3IuJywgJycpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBub3JtYWxpemVkUmVwbGljYXRpb25PcHRpb25zW2tleV0gPSBwYXJzZUludChub3JtYWxpemVkUmVwbGljYXRpb25PcHRpb25zW2tleV0sIDEwKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbm9ybWFsaXplZFJlcGxpY2F0aW9uT3B0aW9ucztcbiAgfSxcblxuICBub3JtYWxpemVfcXVlcnlfb3B0aW9uKG9wdGlvbnMpIHtcbiAgICBjb25zdCBxdWVyeU9wdGlvbnMgPSB7IHByZXBhcmU6IG9wdGlvbnMucHJlcGFyZSB9O1xuICAgIGlmIChvcHRpb25zLmNvbnNpc3RlbmN5KSBxdWVyeU9wdGlvbnMuY29uc2lzdGVuY3kgPSBvcHRpb25zLmNvbnNpc3RlbmN5O1xuICAgIGlmIChvcHRpb25zLmZldGNoU2l6ZSkgcXVlcnlPcHRpb25zLmZldGNoU2l6ZSA9IG9wdGlvbnMuZmV0Y2hTaXplO1xuICAgIGlmIChvcHRpb25zLmF1dG9QYWdlKSBxdWVyeU9wdGlvbnMuYXV0b1BhZ2UgPSBvcHRpb25zLmF1dG9QYWdlO1xuICAgIGlmIChvcHRpb25zLmhpbnRzKSBxdWVyeU9wdGlvbnMuaGludHMgPSBvcHRpb25zLmhpbnRzO1xuICAgIGlmIChvcHRpb25zLnBhZ2VTdGF0ZSkgcXVlcnlPcHRpb25zLnBhZ2VTdGF0ZSA9IG9wdGlvbnMucGFnZVN0YXRlO1xuICAgIGlmIChvcHRpb25zLnJldHJ5KSBxdWVyeU9wdGlvbnMucmV0cnkgPSBvcHRpb25zLnJldHJ5O1xuICAgIGlmIChvcHRpb25zLnNlcmlhbENvbnNpc3RlbmN5KSBxdWVyeU9wdGlvbnMuc2VyaWFsQ29uc2lzdGVuY3kgPSBvcHRpb25zLnNlcmlhbENvbnNpc3RlbmN5O1xuICAgIGlmIChvcHRpb25zLmN1c3RvbVBheWxvYWQpIHF1ZXJ5T3B0aW9ucy5jdXN0b21QYXlsb2FkID0gb3B0aW9ucy5jdXN0b21QYXlsb2FkO1xuICAgIGlmIChvcHRpb25zLmlzSWRlbXBvdGVudCkgcXVlcnlPcHRpb25zLmlzSWRlbXBvdGVudCA9IG9wdGlvbnMuaXNJZGVtcG90ZW50O1xuICAgIGlmIChvcHRpb25zLnJlYWRUaW1lb3V0KSBxdWVyeU9wdGlvbnMucmVhZFRpbWVvdXQgPSBvcHRpb25zLnJlYWRUaW1lb3V0O1xuICAgIGlmIChvcHRpb25zLnJldHJ5KSBxdWVyeU9wdGlvbnMucmV0cnkgPSBvcHRpb25zLnJldHJ5O1xuICAgIGlmIChvcHRpb25zLnJldHJ5T25UaW1lb3V0KSBxdWVyeU9wdGlvbnMucmV0cnlPblRpbWVvdXQgPSBvcHRpb25zLnJldHJ5T25UaW1lb3V0O1xuICAgIGlmIChvcHRpb25zLnJvdXRpbmdJbmRleGVzKSBxdWVyeU9wdGlvbnMucm91dGluZ0luZGV4ZXMgPSBvcHRpb25zLnJvdXRpbmdJbmRleGVzO1xuICAgIGlmIChvcHRpb25zLnJvdXRpbmdLZXkpIHF1ZXJ5T3B0aW9ucy5yb3V0aW5nS2V5ID0gb3B0aW9ucy5yb3V0aW5nS2V5O1xuICAgIGlmIChvcHRpb25zLnJvdXRpbmdOYW1lcykgcXVlcnlPcHRpb25zLnJvdXRpbmdOYW1lcyA9IG9wdGlvbnMucm91dGluZ05hbWVzO1xuICAgIGlmIChvcHRpb25zLnRpbWVzdGFtcCkgcXVlcnlPcHRpb25zLnRpbWVzdGFtcCA9IG9wdGlvbnMudGltZXN0YW1wO1xuICAgIHJldHVybiBxdWVyeU9wdGlvbnM7XG4gIH0sXG5cbiAgbm9ybWFsaXplX3VzZXJfZGVmaW5lZF90eXBlKGZpZWxkVHlwZSkge1xuICAgIHJldHVybiBub3JtYWxpemVUeXBlRGVmKGZpZWxkVHlwZSk7XG4gIH0sXG5cbiAgbm9ybWFsaXplX3ByaW1hcnlfa2V5KG91dHB1dFNjaGVtYSkge1xuICAgIGlmIChvdXRwdXRTY2hlbWEua2V5ICYmIHR5cGVvZiBvdXRwdXRTY2hlbWEua2V5WzBdID09PSAnc3RyaW5nJykge1xuICAgICAgb3V0cHV0U2NoZW1hLmtleVswXSA9IFtvdXRwdXRTY2hlbWEua2V5WzBdXTtcbiAgICB9XG5cbiAgICBpZiAob3V0cHV0U2NoZW1hLmtleSAmJiBvdXRwdXRTY2hlbWEua2V5Lmxlbmd0aCkge1xuICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBvdXRwdXRTY2hlbWEua2V5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghb3V0cHV0U2NoZW1hLmNsdXN0ZXJpbmdfb3JkZXIpIG91dHB1dFNjaGVtYS5jbHVzdGVyaW5nX29yZGVyID0ge307XG4gICAgICAgIGlmICghb3V0cHV0U2NoZW1hLmNsdXN0ZXJpbmdfb3JkZXJbb3V0cHV0U2NoZW1hLmtleVtpXV0pIHtcbiAgICAgICAgICBvdXRwdXRTY2hlbWEuY2x1c3RlcmluZ19vcmRlcltvdXRwdXRTY2hlbWEua2V5W2ldXSA9ICdBU0MnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICAgICAgb3V0cHV0U2NoZW1hLmNsdXN0ZXJpbmdfb3JkZXJbb3V0cHV0U2NoZW1hLmtleVtpXV0gPSBvdXRwdXRTY2hlbWEuY2x1c3RlcmluZ19vcmRlcltvdXRwdXRTY2hlbWEua2V5W2ldXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBub3JtYWxpemVfZmllbGRzKG1vZGVsU2NoZW1hLCBvdXRwdXRTY2hlbWEpIHtcbiAgICBPYmplY3Qua2V5cyhvdXRwdXRTY2hlbWEuZmllbGRzKS5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgKG91dHB1dFNjaGVtYS5maWVsZHNbZmllbGROYW1lXSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG91dHB1dFNjaGVtYS5maWVsZHNbZmllbGROYW1lXSA9IHsgdHlwZTogb3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWVsZE5hbWUgPT09ICdzb2xyX3F1ZXJ5JyB8fCBvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udmlydHVhbCkge1xuICAgICAgICBkZWxldGUgb3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udHlwZURlZikge1xuICAgICAgICBvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0gPSB7XG4gICAgICAgICAgdHlwZTogb3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnR5cGUsXG4gICAgICAgICAgdHlwZURlZjogb3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnR5cGVEZWYsXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0gPSB7IHR5cGU6IG91dHB1dFNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udHlwZSA9PT0gJ3ZhcmNoYXInKSB7XG4gICAgICAgIG91dHB1dFNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlID0gJ3RleHQnO1xuICAgICAgfVxuXG4gICAgICBpZiAoWydtYXAnLCAnbGlzdCcsICdzZXQnLCAnZnJvemVuJ10uaW5jbHVkZXMob3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnR5cGUpKSB7XG4gICAgICAgIGlmIChtb2RlbFNjaGVtYS50eXBlTWFwcyAmJiBtb2RlbFNjaGVtYS50eXBlTWFwc1tmaWVsZE5hbWVdKSB7XG4gICAgICAgICAgb3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnR5cGVEZWYgPSBub3JtYWxpemVUeXBlRGVmKG1vZGVsU2NoZW1hLnR5cGVNYXBzW2ZpZWxkTmFtZV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dFNjaGVtYS5maWVsZHNbZmllbGROYW1lXS50eXBlRGVmID0gbm9ybWFsaXplVHlwZURlZihvdXRwdXRTY2hlbWEuZmllbGRzW2ZpZWxkTmFtZV0udHlwZURlZik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGVsU2NoZW1hLnN0YXRpY01hcHMgJiYgbW9kZWxTY2hlbWEuc3RhdGljTWFwc1tmaWVsZE5hbWVdID09PSB0cnVlKSB7XG4gICAgICAgIG91dHB1dFNjaGVtYS5maWVsZHNbZmllbGROYW1lXS5zdGF0aWMgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChtb2RlbFNjaGVtYS5maWVsZHNbZmllbGROYW1lXS5zdGF0aWMpIHtcbiAgICAgICAgb3V0cHV0U2NoZW1hLmZpZWxkc1tmaWVsZE5hbWVdLnN0YXRpYyA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgbm9ybWFsaXplX21hdGVyaWFsaXplZF92aWV3cyhvdXRwdXRTY2hlbWEpIHtcbiAgICBpZiAoIW91dHB1dFNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MpIHtcbiAgICAgIG91dHB1dFNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MgPSB7fTtcbiAgICB9XG5cbiAgICBPYmplY3Qua2V5cyhvdXRwdXRTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzKS5mb3JFYWNoKChtYXRlcmlhbGl6ZWRWaWV3TmFtZSkgPT4ge1xuICAgICAgY29uc3Qgb3V0cHV0TVZpZXcgPSBvdXRwdXRTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW21hdGVyaWFsaXplZFZpZXdOYW1lXTtcbiAgICAgIC8vIG1ha2UgcGFyaXRpb24ga2V5IGFuIGFycmF5XG4gICAgICBpZiAob3V0cHV0TVZpZXcua2V5ICYmIHR5cGVvZiBvdXRwdXRNVmlldy5rZXlbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG91dHB1dE1WaWV3LmtleVswXSA9IFtvdXRwdXRNVmlldy5rZXlbMF1dO1xuICAgICAgfVxuXG4gICAgICAvLyBhZGQgY2x1c3RlcmluZ19vcmRlciBmb3IgYWxsIGNsdXN0ZXJpbmcga2V5c1xuICAgICAgaWYgKG91dHB1dE1WaWV3LmtleSAmJiBvdXRwdXRNVmlldy5rZXkubGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgb3V0cHV0TVZpZXcua2V5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCFvdXRwdXRNVmlldy5jbHVzdGVyaW5nX29yZGVyKSB7XG4gICAgICAgICAgICBvdXRwdXRNVmlldy5jbHVzdGVyaW5nX29yZGVyID0ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghb3V0cHV0TVZpZXcuY2x1c3RlcmluZ19vcmRlcltvdXRwdXRNVmlldy5rZXlbaV1dKSB7XG4gICAgICAgICAgICBvdXRwdXRNVmlldy5jbHVzdGVyaW5nX29yZGVyW291dHB1dE1WaWV3LmtleVtpXV0gPSAnQVNDJztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW5cbiAgICAgICAgICBvdXRwdXRNVmlldy5jbHVzdGVyaW5nX29yZGVyW291dHB1dE1WaWV3LmtleVtpXV0gPSBvdXRwdXRNVmlldy5jbHVzdGVyaW5nX29yZGVyW291dHB1dE1WaWV3LmtleVtpXV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBhZGQgYWxsIG5vbiBleGlzdGVudCBwcmltYXJ5IGtleSBpdGVtcyB0byBzZWxlY3QgYW5kIHNvcnQgdGhlbVxuICAgICAgZm9yIChsZXQgcGtleUluZGV4ID0gMDsgcGtleUluZGV4IDwgb3V0cHV0TVZpZXcua2V5Lmxlbmd0aDsgcGtleUluZGV4KyspIHtcbiAgICAgICAgaWYgKHBrZXlJbmRleCA9PT0gMCkge1xuICAgICAgICAgIGZvciAobGV0IHBhcnRpdGlvbkluZGV4ID0gMDsgcGFydGl0aW9uSW5kZXggPCBvdXRwdXRNVmlldy5rZXlbcGtleUluZGV4XS5sZW5ndGg7IHBhcnRpdGlvbkluZGV4KyspIHtcbiAgICAgICAgICAgIGlmICghb3V0cHV0TVZpZXcuc2VsZWN0LmluY2x1ZGVzKG91dHB1dE1WaWV3LmtleVtwa2V5SW5kZXhdW3BhcnRpdGlvbkluZGV4XSkpIHtcbiAgICAgICAgICAgICAgb3V0cHV0TVZpZXcuc2VsZWN0LnB1c2gob3V0cHV0TVZpZXcua2V5W3BrZXlJbmRleF1bcGFydGl0aW9uSW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoIW91dHB1dE1WaWV3LnNlbGVjdC5pbmNsdWRlcyhvdXRwdXRNVmlldy5rZXlbcGtleUluZGV4XSkpIHtcbiAgICAgICAgICBvdXRwdXRNVmlldy5zZWxlY3QucHVzaChvdXRwdXRNVmlldy5rZXlbcGtleUluZGV4XSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gY2hlY2sgaWYgc2VsZWN0IGhhcyAqIGFuZCB0aGVuIGFkZCBhbGwgZmllbGRzIHRvIHNlbGVjdFxuICAgICAgaWYgKG91dHB1dE1WaWV3LnNlbGVjdFswXSA9PT0gJyonKSB7XG4gICAgICAgIG91dHB1dE1WaWV3LnNlbGVjdCA9IE9iamVjdC5rZXlzKG91dHB1dFNjaGVtYS5maWVsZHMpO1xuICAgICAgfVxuXG4gICAgICBvdXRwdXRNVmlldy5zZWxlY3Quc29ydChhcnJheVNvcnQpO1xuXG4gICAgICBpZiAoIW91dHB1dE1WaWV3LndoZXJlX2NsYXVzZSkge1xuICAgICAgICBvdXRwdXRNVmlldy53aGVyZV9jbGF1c2UgPSBwYXJzZXIuZ2V0X212aWV3X3doZXJlX2NsYXVzZShvdXRwdXRTY2hlbWEsIG91dHB1dE1WaWV3KTtcbiAgICAgIH1cbiAgICAgIGlmIChfLmlzUGxhaW5PYmplY3Qob3V0cHV0TVZpZXcuZmlsdGVycykpIHtcbiAgICAgICAgZGVsZXRlIG91dHB1dE1WaWV3LmZpbHRlcnM7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgbm9ybWFsaXplX2luZGV4ZXMob3V0cHV0U2NoZW1hKSB7XG4gICAgaWYgKCFvdXRwdXRTY2hlbWEuaW5kZXhlcykge1xuICAgICAgb3V0cHV0U2NoZW1hLmluZGV4ZXMgPSBbXTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRTY2hlbWEuaW5kZXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaW5kZXhOYW1lTGlzdCA9IG91dHB1dFNjaGVtYS5pbmRleGVzW2ldLnJlcGxhY2UoL1tcIlxcc10vZywgJycpLnNwbGl0KC9bKCldL2cpO1xuICAgICAgaWYgKGluZGV4TmFtZUxpc3QubGVuZ3RoID4gMSkge1xuICAgICAgICBpbmRleE5hbWVMaXN0WzBdID0gaW5kZXhOYW1lTGlzdFswXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoaW5kZXhOYW1lTGlzdFswXSA9PT0gJ3ZhbHVlcycpIG91dHB1dFNjaGVtYS5pbmRleGVzW2ldID0gaW5kZXhOYW1lTGlzdFsxXTtcbiAgICAgICAgZWxzZSBvdXRwdXRTY2hlbWEuaW5kZXhlc1tpXSA9IHV0aWwuZm9ybWF0KCclcyglcyknLCBpbmRleE5hbWVMaXN0WzBdLCBpbmRleE5hbWVMaXN0WzFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG91dHB1dFNjaGVtYS5pbmRleGVzW2ldID0gaW5kZXhOYW1lTGlzdFswXTtcbiAgICAgIH1cbiAgICB9XG4gICAgb3V0cHV0U2NoZW1hLmluZGV4ZXMuc29ydChhcnJheVNvcnQpO1xuICB9LFxuXG4gIG5vcm1hbGl6ZV9jdXN0b21faW5kZXhlcyhvdXRwdXRTY2hlbWEpIHtcbiAgICBpZiAob3V0cHV0U2NoZW1hLmN1c3RvbV9pbmRleCkge1xuICAgICAgb3V0cHV0U2NoZW1hLmN1c3RvbV9pbmRleGVzID0gW291dHB1dFNjaGVtYS5jdXN0b21faW5kZXhdO1xuICAgICAgZGVsZXRlIG91dHB1dFNjaGVtYS5jdXN0b21faW5kZXg7XG4gICAgfVxuXG4gICAgaWYgKG91dHB1dFNjaGVtYS5jdXN0b21faW5kZXhlcykge1xuICAgICAgY29uc3QgY3VzdG9tQXJyYXlTb3J0ID0gKGEsIGIpID0+IHtcbiAgICAgICAgaWYgKGEub24gPiBiLm9uKSByZXR1cm4gMTtcbiAgICAgICAgaWYgKGEub24gPCBiLm9uKSByZXR1cm4gLTE7XG5cbiAgICAgICAgaWYgKGEudXNpbmcgPiBiLnVzaW5nKSByZXR1cm4gMTtcbiAgICAgICAgaWYgKGEudXNpbmcgPCBiLnVzaW5nKSByZXR1cm4gLTE7XG5cbiAgICAgICAgaWYgKGEub3B0aW9ucyA+IGIub3B0aW9ucykgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhLm9wdGlvbnMgPCBiLm9wdGlvbnMpIHJldHVybiAtMTtcblxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH07XG5cbiAgICAgIG91dHB1dFNjaGVtYS5jdXN0b21faW5kZXhlcy5zb3J0KGN1c3RvbUFycmF5U29ydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dFNjaGVtYS5jdXN0b21faW5kZXhlcyA9IFtdO1xuICAgIH1cblxuICAgIG91dHB1dFNjaGVtYS5jdXN0b21faW5kZXhlcyA9IF8ucmVtb3ZlKG91dHB1dFNjaGVtYS5jdXN0b21faW5kZXhlcywgKGNpbmRleCkgPT4gKGNpbmRleC5vbiAhPT0gJ3NvbHJfcXVlcnknKSk7XG4gIH0sXG5cbiAgbm9ybWFsaXplX21vZGVsX3NjaGVtYShtb2RlbFNjaGVtYSkge1xuICAgIGNvbnN0IG91dHB1dFNjaGVtYSA9IF8uY2xvbmVEZWVwKG1vZGVsU2NoZW1hLCB0cnVlKTtcbiAgICBjb25zdCBub3JtYWxpemFibGVTY2hlbWFQcm9wZXJ0aWVzID0gW1xuICAgICAgJ2ZpZWxkcycsICdrZXknLCAnY2x1c3RlcmluZ19vcmRlcicsICdtYXRlcmlhbGl6ZWRfdmlld3MnLCAnaW5kZXhlcycsICdjdXN0b21faW5kZXgnLCAnY3VzdG9tX2luZGV4ZXMnLFxuICAgIF07XG5cbiAgICBPYmplY3Qua2V5cyhvdXRwdXRTY2hlbWEpLmZvckVhY2goKHNjaGVtYVByb3BlcnR5KSA9PiB7XG4gICAgICBpZiAoIW5vcm1hbGl6YWJsZVNjaGVtYVByb3BlcnRpZXMuaW5jbHVkZXMoc2NoZW1hUHJvcGVydHkpKSB7XG4gICAgICAgIGRlbGV0ZSBvdXRwdXRTY2hlbWFbc2NoZW1hUHJvcGVydHldO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5ub3JtYWxpemVfZmllbGRzKG1vZGVsU2NoZW1hLCBvdXRwdXRTY2hlbWEpO1xuICAgIHRoaXMubm9ybWFsaXplX3ByaW1hcnlfa2V5KG91dHB1dFNjaGVtYSk7XG4gICAgdGhpcy5ub3JtYWxpemVfbWF0ZXJpYWxpemVkX3ZpZXdzKG91dHB1dFNjaGVtYSk7XG4gICAgdGhpcy5ub3JtYWxpemVfaW5kZXhlcyhvdXRwdXRTY2hlbWEpO1xuICAgIHRoaXMubm9ybWFsaXplX2N1c3RvbV9pbmRleGVzKG91dHB1dFNjaGVtYSk7XG5cbiAgICByZXR1cm4gb3V0cHV0U2NoZW1hO1xuICB9LFxuXG4gIHJlbW92ZV9kZXBlbmRlbnRfdmlld3NfZnJvbV9ub3JtYWxpemVkX3NjaGVtYShub3JtYWxpemVkREJTY2hlbWEsIGRiU2NoZW1hLCBmaWVsZE5hbWUpIHtcbiAgICBjb25zdCBkZXBlbmRlbnRWaWV3cyA9IFtdO1xuICAgIE9iamVjdC5rZXlzKG5vcm1hbGl6ZWREQlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3MpLmZvckVhY2goKGRiVmlld05hbWUpID0+IHtcbiAgICAgIGlmIChub3JtYWxpemVkREJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW2RiVmlld05hbWVdLnNlbGVjdC5pbmNsdWRlcyhmaWVsZE5hbWUpKSB7XG4gICAgICAgIGRlcGVuZGVudFZpZXdzLnB1c2goZGJWaWV3TmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWREQlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3NbZGJWaWV3TmFtZV0uc2VsZWN0WzBdID09PSAnKicpIHtcbiAgICAgICAgZGVwZW5kZW50Vmlld3MucHVzaChkYlZpZXdOYW1lKTtcbiAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZERCU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tkYlZpZXdOYW1lXS5rZXkuaW5jbHVkZXMoZmllbGROYW1lKSkge1xuICAgICAgICBkZXBlbmRlbnRWaWV3cy5wdXNoKGRiVmlld05hbWUpO1xuICAgICAgfSBlbHNlIGlmIChfLmlzQXJyYXkobm9ybWFsaXplZERCU2NoZW1hLm1hdGVyaWFsaXplZF92aWV3c1tkYlZpZXdOYW1lXS5rZXlbMF0pXG4gICAgICAgICAgICAgICAgICAmJiBub3JtYWxpemVkREJTY2hlbWEubWF0ZXJpYWxpemVkX3ZpZXdzW2RiVmlld05hbWVdLmtleVswXS5pbmNsdWRlcyhmaWVsZE5hbWUpKSB7XG4gICAgICAgIGRlcGVuZGVudFZpZXdzLnB1c2goZGJWaWV3TmFtZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgZGVwZW5kZW50Vmlld3MuZm9yRWFjaCgodmlld05hbWUpID0+IHtcbiAgICAgIG5vcm1hbGl6ZWREQlNjaGVtYS5tYXRlcmlhbGl6ZWRfdmlld3Nbdmlld05hbWVdID0ge307XG4gICAgfSk7XG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vcm1hbGl6ZXI7XG4iXX0=